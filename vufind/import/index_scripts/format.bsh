import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.DataField;

/**
 * Determine Record Format(s)
 *
 * @param  Record          record
 * @return Set     format of record
 */
public Set getFormat(Record record){
    Set result = new LinkedHashSet();
    String leader = record.getLeader().toString();
    char leaderBit;
    ControlField fixedField = (ControlField) record.getVariableField("008");
    DataField title = (DataField) record.getVariableField("245");
    String formatString;
    char formatCode = ' ';
    char formatCode2 = ' ';

    // check if there's an h in the 245
    if (title != null) {
        if (title.getSubfield('h') != null){
            if (title.getSubfield('h').getData().toLowerCase().contains("[electronic resource]")) {
                result.add("Electronic");
                return result;
            }
        }
    }

    // check if ID in 003 starts with EBX -> eBook (MPG)
    ControlField id = (ControlField) record.getVariableField("003");
    if (id != null) {
       if (id.getData().substring(0,3).equals("EBX")) {
           result.add("Electronic");
           return result;
       } 
    }

    // check the 007 - this is a repeating field
    List fields = record.getVariableFields("007");
    Iterator fieldsIter = fields.iterator();
    if (fields != null) {
        ControlField formatField;
        while(fieldsIter.hasNext()) {
            formatField = (ControlField) fieldsIter.next();
            formatString = formatField.getData().toUpperCase();
            formatCode = formatString.length() > 0 ? formatString.charAt(0) : ' ';
            formatCode2 = formatString.length() > 1 ? formatString.charAt(1) : ' ';
            switch (formatCode) {
                case 'A':
                    switch(formatCode2) {
                        case 'D':
                            result.add("Atlas");
                            break;
                        default:
                            result.add("Map");
                            break;
                    }
                    break;
                case 'C':
                    switch(formatCode2) {
                        case 'A':
                            result.add("TapeCartridge");
                            break;
                        case 'B':
                            result.add("ChipCartridge");
                            break;
                        case 'C':
                            result.add("DiscCartridge");
                            break;
                        case 'F':
                            result.add("TapeCassette");
                            break;
                        case 'H':
                            result.add("TapeReel");
                            break;
                        case 'J':
                            result.add("FloppyDisk");
                            break;
                        case 'M':
                        case 'O':
                            result.add("CDROM");
                            break;
                        case 'R':
                            // Do not return - this will cause anything with an
                            // 856 field to be labeled as "Electronic"
                            break;
                        default:
                            result.add("Software");
                            break;
                    }
                    break;
                case 'D':
                    result.add("Globe");
                    break;
                case 'F':
                    result.add("Braille");
                    break;
                case 'G':
                    switch(formatCode2) {
                        case 'C':
                        case 'D':
                            result.add("Filmstrip");
                            break;
                        case 'T':
                            result.add("Transparency");
                            break;
                        default:
                            result.add("Slide");
                            break;
                    }
                    break;
                case 'H':
                    result.add("Microfilm");
                    break;
                case 'K':
                    switch(formatCode2) {
                        case 'C':
                            result.add("Collage");
                            break;
                        case 'D':
                            result.add("Drawing");
                            break;
                        case 'E':
                            result.add("Painting");
                            break;
                        case 'F':
                            result.add("Print");
                            break;
                        case 'G':
                            result.add("Photonegative");
                            break;
                        case 'J':
                            result.add("Print");
                            break;
                        case 'L':
                            result.add("Drawing");
                            break;
                        case 'O':
                            result.add("FlashCard");
                            break;
                        case 'N':
                            result.add("Chart");
                            break;
                        default:
                            result.add("Photo");
                            break;
                    }
                    break;
                case 'M':
                    switch(formatCode2) {
                        case 'F':
                            result.add("VideoCassette");
                            break;
                        case 'R':
                            result.add("Filmstrip");
                            break;
                        default:
                            result.add("MotionPicture");
                            break;
                    }
                    break;
                case 'O':
                    result.add("Kit");
                    break;
                case 'Q':
                    result.add("MusicalScore");
                    break;
                case 'R':
                    result.add("SensorImage");
                    break;
                case 'S':
                    switch(formatCode2) {
                        case 'D':
                            result.add("SoundDisc");
                            break;
                        case 'S':
                            result.add("SoundCassette");
                            break;
                        default:
                            result.add("SoundRecording");
                            break;
                    }
                    break;
                case 'V':
                    switch(formatCode2) {
                        case 'C':
                            result.add("VideoCartridge");
                            break;
                        case 'D':
                            result.add("VideoDisc");
                            break;
                        case 'F':
                            result.add("VideoCassette");
                            break;
                        case 'R':
                            result.add("VideoReel");
                            break;
                        default:
                            result.add("Video");
                            break;
                    }
                    break;
            }
        }
        if (!result.isEmpty()) {
            return result;
        }
    }

    // check the Leader at position 6
    leaderBit = leader.charAt(6);
    switch (Character.toUpperCase(leaderBit)) {
        case 'C':
        case 'D':
            result.add("MusicalScore");
            break;
        case 'E':
        case 'F':
            result.add("Map");
            break;
        case 'G':
            result.add("Slide");
            break;
        case 'I':
            result.add("SoundRecording");
            break;
        case 'J':
            result.add("MusicRecording");
            break;
        case 'K':
            result.add("Photo");
            break;
        case 'M':
            result.add("Electronic");
            break;
        case 'O':
        case 'P':
            result.add("Kit");
            break;
        case 'R':
            result.add("PhysicalObject");
            break;
        case 'T':
            result.add("Manuscript");
            break;
    }
    if (!result.isEmpty()) {
        return result;
    }

    // check the Leader at position 7
    leaderBit = leader.charAt(7);
    switch (Character.toUpperCase(leaderBit)) {
        // Monograph
        case 'M':
            if (formatCode == 'C') {
                result.add("eBook");
            } else {
                result.add("Book");
            }
            break;
        // Serial
        case 'S':
            // Look in 008 to determine what type of Continuing Resource
            if (fixedField != null) {
                formatCode = fixedField.getData().toUpperCase().charAt(21);
                switch (formatCode) {
                    case 'N':
                        result.add("Newspaper");
                        break;
                    case 'P':
                        result.add("Journal");
                        break;
                    default:
                        result.add("Serial");
                        break;
                }
            }
    }

    // Nothing worked!
    if (result.isEmpty()) {
        result.add("Unknown");
    }
    
    return result;
}

public Set getFormatMPG(Record record){
    Set result = new LinkedHashSet();
    String leader = record.getLeader().toString().toUpperCase();
    char formatCode = ' ';
    char formatCode2 = ' ';
    char leader6 = leader.charAt(6);
    char leader7 = leader.charAt(7);
    DataField title = (DataField) record.getVariableField("852");

    // check if ID in 003 starts with EBX -> eBook (MPG)
    ControlField id = (ControlField) record.getVariableField("003");
    if (id != null) {
       if (id.getData().substring(0,3).equals("EBX")) {
           result.add("eBook");
           return result;
       } 
       else if (id.getData().substring(0,3).equals("DE-")) {
          result.add("eJournal");
          return result;
       }
    }

    if (title != null) {
        if (title.getSubfield('m') != null) {
            String format = title.getSubfield('m').getData();
            if (format.equals("BOOK")) {
                result.add("Book");
            }
            else if (format.equals("KARTE")) {
                result.add("Map");
            }
            else if (format.equals("ZEIT")) {
                result.add("Newspaper");
            }
            else if (format.equals("LL")) {
                result.add("Loose-leaf Edition");
            }

        }
    }

    if (!result.isEmpty()) {
        return result;
    }

    // check the 007 - this is a repeating field
    List fields = record.getVariableFields("007");
    
    Iterator fieldsIter = fields.iterator();
    if (fields != null) {
        ControlField formatField;
        while(fieldsIter.hasNext()) {
            formatField = (ControlField) fieldsIter.next();
            formatString = formatField.getData().toUpperCase();
            formatCode = formatString.length() > 0 ? formatString.charAt(0) : ' ';
            formatCode2 = formatString.length() > 1 ? formatString.charAt(1) : ' ';


            switch (formatCode) {
                case 'V':
                    result.add("Movie");
                    break;
                case 'C':
                    if (formatCode2 == 'O' && leader6 == 'M') {
                        result.add("CD-ROM, DVD");
                    }
                    break;
//                case 'S':
//                    result.add("Zeitschrift");
//                    break;
            } 
        }
    }

    if (!result.isEmpty()) {
        return result;
    }

    switch (leader6) {
        case 'M':
            result.add("eBook");
            break;
    }

    switch (leader7) {
        case 'S':
            result.add("Journal");
            break;
    }

    if (!result.isEmpty()) {
        return result;
    }

    // Nothing worked!
    if (result.isEmpty()) {
        result.add("Unknown");
    }
   
    return result;
}

public Set getFormatMPG_RDG(Record record) {
    Set result = new LinkedHashSet();
    String leader = record.getLeader().toString().toUpperCase();
    char formatCode = ' ';
    char formatCode2 = ' ';
    char leader6 = leader.charAt(6);
    char leader7 = leader.charAt(7);
    DataField title = (DataField) record.getVariableField("852");

    // check if ID in 003 starts with EBX -> eBook (MPG)
    ControlField id = (ControlField) record.getVariableField("003");
    if (id != null) {
       if (id.getData().substring(0,3).equals("EBX")) {
           result.add("eBook");
           return result;
       }
       else if (id.getData().substring(0,3).equals("DE-")) {
          result.add("eJournal");
          return result;
       }
    }

    DataField formatfield2 = (DataField) record.getVariableField("084");
    if (formatfield2 != null) {
      if (formatfield2.getSubfield('a') != null) {
        String format2 = formatfield2.getSubfield('a').getData();
        if (format2.equals("BAP d 200") || format2.equals("BAP e 200")) {
            result.add("Festschrift");
        }
      }
    }

    if (result.isEmpty()) {
    // filter for Discussion Papers
    DataField formatfield3 = (DataField) record.getVariableField("090");
    if (formatfield3 != null) {
      if (formatfield3.getSubfield('a') != null) {
        String format3 = formatfield3.getSubfield('a').getData();
        if (format3.contains("DP")) {
            result.add("Article");
        }
      }
    }
    }

    if (result.isEmpty()) {
    List fields = record.getVariableFields("996");
    Iterator fieldsIter = fields.iterator();
    if (fields != null) {
            DataField formatfield;
        while(fieldsIter.hasNext()) {
            formatfield = (DataField) fieldsIter.next();
	    if (formatfield.getSubfield('a') != null) {
		String format = formatfield.getSubfield('a').getData();
		if (format.equals("E")) {
		    result.add("eBook");
		    return result;
		}
		if (format.equals("M")) {
		    result.add("Book");
		}
		if (format.equals("S")) {
		    result.add("Book");
		}
		if (format.equals("G")) {
		    result.add("Multivolume Work");
		}
		if (format.equals("U")) {
		    result.add("Article");
		}
		if (format.equals("Z")) {
		    result.add("Journal");
		}
		if (format.equals("O")) {
		    result.add("Offprint");
		}
		if (format.equals("L")) {
		    result.add("Loose-leaf Edition");
		}
	    }
          }
	}
    }
    if (result.isEmpty()) {
        result.add("Unknown");
    }
    return result;
}

